# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.imagine.filters:
        - 'sm'
        - 'md'
        - 'md2'
        - 'xl'
    cart.require_precondition: false
    # default for env var if not provided in real environment
    env(DELIVERY_COURIER_SURCHARGE): '300'
    app.delivery.courier_surcharge: '%env(int:DELIVERY_COURIER_SURCHARGE)%'

    # Public delivery endpoints configuration (env-driven)
    env(DELIVERY_PUBLIC_TTL): '600'
    env(DELIVERY_POINTS_DEFAULT_LIMIT): '20'
    env(DELIVERY_POINTS_MAX_LIMIT): '100'
    delivery.public.ttl_seconds: '%env(int:DELIVERY_PUBLIC_TTL)%'
    delivery.points.default_limit: '%env(int:DELIVERY_POINTS_DEFAULT_LIMIT)%'
    delivery.points.max_limit: '%env(int:DELIVERY_POINTS_MAX_LIMIT)%'

    # Delivery configuration (defaults via env)
    env(DELIVERY_FREE_THRESHOLD_DEFAULT): '3000'
    env(DELIVERY_TYPES): 'pvz,courier'
    # Default sender email if not provided via real environment
    env(ADMIN_FROM_EMAIL): 'no-reply@example.com'
    app.delivery.free_threshold_default: '%env(int:DELIVERY_FREE_THRESHOLD_DEFAULT)%'
    app.delivery.types: '%env(csv:DELIVERY_TYPES)%'

    # Cart cookie configuration
    cart.cookie.force_secure_in_prod: true
    cart.cookie.use_host_prefix: true
    cart.cookie.name: 'cart_id'
    cart.cookie.ttl_days: 180
    cart.cookie.domain: null
    cart.cookie.same_site: 'lax'

    # Notification settings
    app.notification.from_email: '%env(ADMIN_FROM_EMAIL)%'

    # Yandex Delivery API configuration (env-driven)
    env(YANDEX_DELIVERY_BASE_URL): 'https://b2b-authproxy.taxi.yandex.net'
    env(YANDEX_DELIVERY_TOKEN): ''
    app.yandex_delivery.base_url: '%env(string:YANDEX_DELIVERY_BASE_URL)%'
    app.yandex_delivery.token: '%env(string:YANDEX_DELIVERY_TOKEN)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    App\State\UserPasswordProcessor: ~


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude: '../src/{DependencyInjection,Entity/Migrations,Tests,Kernel.php}'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Doctrine entity listener as service (attributes already present, but ensure service is public)
    App\Doctrine\Listener\ProductEntityListener: ~
    App\Doctrine\Listener\OptionEntityListener: ~

    # Cart context service
    App\Service\CartContext:
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@App\Repository\CartRepository'
            - '@lock.factory'
            - '@request_stack'
            - '@App\Http\CartCookieFactory'

    # Cart cookie listener
    App\EventListener\CartCookieListener:
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }

    # Cart login subscriber
    App\EventSubscriber\CartLoginSubscriber:
        arguments:
            - '@App\Repository\CartRepository'
            - '@App\Service\CartManager'
            - '@doctrine.orm.entity_manager'
            - '@App\Http\CartCookieFactory'

    # Remove Intervention Image wiring (migrated to LiipImagine)

    # Inject project dir for services that need filesystem paths
    App\Controller\Admin\MediaAdminController:
        tags: [ 'controller.service_arguments' ]
        arguments:
            $projectDir: '%kernel.project_dir%'
            $imagineFilters: '%app.imagine.filters%'

    App\Controller\ConfigController:
        tags: [ 'controller.service_arguments' ]

    App\Controller\Api\DeliveryPublicController:
        tags: ['controller.service_arguments']
        arguments:
            $pointsDefaultLimit: '%delivery.points.default_limit%'
            $pointsMaxLimit: '%delivery.points.max_limit%'
            $publicTtlSeconds: '%delivery.public.ttl_seconds%'

    App\Service\ImageCacheService:
        arguments:
            $projectDir: '%kernel.project_dir%'
            $cacheManager: '@liip_imagine.cache.manager'
            $filterManager: '@liip_imagine.filter.manager'
            $filterConfig: '@liip_imagine.filter.configuration'
            $dataManager: '@liip_imagine.data.manager'

    App\Service\ImageWarmupService: ~

    # Footer categories service
    App\Service\FooterCategoryService:
        public: true

    # Navbar categories service
    App\Service\NavbarCategoryService:
        public: true

    # Product state processor with cart item repository
    App\State\ProductStateProcessor:
        arguments:
            $cartItemRepository: '@App\Repository\CartItemRepository'

    # Product copy service
    App\Service\ProductCopyService:
        arguments:
            $lifecycleService: '@App\Service\ProductLifecycleService'

    # Delivery provider registry
    App\Service\Delivery\Provider\DeliveryProviderRegistry:
        arguments:
            $providers: !tagged_iterator 'app.delivery_provider'

    # Delivery methods auto-registration
    App\Service\Delivery\Method\PvzDeliveryMethod:
        tags: ['app.delivery_method', 'app.delivery_provider']
        bind:
            # Указываем, что в конструктор этого класса в аргумент с именем $calculationType
            # нужно передать строку 'cost_per_item'.
            # Чтобы отключить расчет по количеству, просто измените на 'flat_rate'.
            $calculationType: 'cost_per_item'
        arguments:
            $defaultFreeThreshold: '%app.delivery.free_threshold_default%'

    App\Service\Delivery\Method\CourierDeliveryMethod:
        tags: ['app.delivery_method', 'app.delivery_provider']
        bind:
            # Для курьера тоже можно задать свой тип расчета.
            $calculationType: 'cost_per_item'
        arguments:
            $surcharge: '%app.delivery.courier_surcharge%'
            $defaultFreeThreshold: '%app.delivery.free_threshold_default%'

    # Cart ETag and write guard services
    App\Http\CartEtags: ~

    App\Http\CartWriteGuard:
        arguments:
            $requirePrecondition: '%cart.require_precondition%'

    App\Http\CartResponse: ~

    # Cart delta builder for optimized responses
    App\Service\CartDeltaBuilder: ~

    # Cart cookie factory for secure cookie management
    App\Http\CartCookieFactory:
        arguments:
            $forceSecureInProd: '%cart.cookie.force_secure_in_prod%'
            $useHostPrefix: '%cart.cookie.use_host_prefix%'
            $cookieName: '%cart.cookie.name%'
            $ttlDays: '%cart.cookie.ttl_days%'
            $domain: '%cart.cookie.domain%'
            $sameSite: !php/const Symfony\Component\HttpFoundation\Cookie::SAMESITE_LAX

    # Idempotency services for Cart API
    App\Service\Idempotency\IdempotencyService: ~
    App\Service\Idempotency\IdempotencyRequestHasher: ~

    # Idempotency logger channel
    monolog.logger.idempotency:
        class: Psr\Log\LoggerInterface
        factory: ['@monolog.logger', 'getLogger']
        arguments:
            - idempotency

    # Yandex Delivery API client
    App\Service\Yandex\YandexDeliveryApi:
        arguments:
            $baseUrl: '%app.yandex_delivery.base_url%'
            $token: '%app.yandex_delivery.token%'
            $timeoutSeconds: 15
