# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.imagine.filters:
        - 'sm'
        - 'md'
        - 'md2'
        - 'xl'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    App\State\UserPasswordProcessor: ~


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude: '../src/{DependencyInjection,Entity/Migrations,Tests,Kernel.php}'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Doctrine entity listener as service (attributes already present, but ensure service is public)
    App\Doctrine\Listener\ProductEntityListener: ~
    App\Doctrine\Listener\OptionEntityListener: ~

    # Cart context service
    App\Service\CartContext:
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@App\Repository\CartRepository'
            - '@lock.factory'
            - '@request_stack'

    # Cart cookie listener
    App\EventListener\CartCookieListener:
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }

    # Cart login subscriber
    App\EventSubscriber\CartLoginSubscriber:
        arguments:
            - '@App\Repository\CartRepository'
            - '@App\Service\CartManager'
            - '@doctrine.orm.entity_manager'

    # Remove Intervention Image wiring (migrated to LiipImagine)

    # Inject project dir for services that need filesystem paths
    App\Controller\Admin\MediaAdminController:
        tags: [ 'controller.service_arguments' ]
        arguments:
            $projectDir: '%kernel.project_dir%'
            $imagineFilters: '%app.imagine.filters%'

    App\Controller\ConfigController:
        tags: [ 'controller.service_arguments' ]

    App\Service\ImageCacheService:
        arguments:
            $projectDir: '%kernel.project_dir%'
            $cacheManager: '@liip_imagine.cache.manager'
            $filterManager: '@liip_imagine.filter.manager'
            $filterConfig: '@liip_imagine.filter.configuration'
            $dataManager: '@liip_imagine.data.manager'

    App\Service\ImageWarmupService: ~

    # Footer categories service
    App\Service\FooterCategoryService:
        public: true

    # Navbar categories service
    App\Service\NavbarCategoryService:
        public: true

    # Product state processor with cart item repository
    App\State\ProductStateProcessor:
        arguments:
            $cartItemRepository: '@App\Repository\CartItemRepository'