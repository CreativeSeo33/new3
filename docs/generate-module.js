#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node docs/generate-module.js <type> <name>
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 * node docs/generate-module.js feature my-new-feature
 * node docs/generate-module.js widget my-new-widget
 */

const fs = require('fs');
const path = require('path');

const [,, moduleType, moduleName] = process.argv;

if (!moduleType || !moduleName) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node docs/generate-module.js <type> <name>');
  console.log('–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  node docs/generate-module.js feature my-new-feature');
  console.log('  node docs/generate-module.js widget my-new-widget');
  process.exit(1);
}

const templates = {
  feature: [
    'feature-api-template.ts',
    'feature-ui-template.ts',
    'feature-index-template.ts'
  ],
  widget: [
    'widget-template.ts'
  ]
};

if (!templates[moduleType]) {
  console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥—É–ª—è: ${moduleType}`);
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:', Object.keys(templates).join(', '));
  process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
const basePath = path.join(__dirname, '..', 'assets', 'catalog', 'src');

let targetPath;
if (moduleType === 'feature') {
  targetPath = path.join(basePath, 'features', moduleName);
  fs.mkdirSync(path.join(targetPath, 'api'), { recursive: true });
  fs.mkdirSync(path.join(targetPath, 'ui'), { recursive: true });
} else if (moduleType === 'widget') {
  targetPath = path.join(basePath, 'widgets', moduleName);
  fs.mkdirSync(targetPath, { recursive: true });
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates[moduleType].forEach(templateFile => {
  const templatePath = path.join(__dirname, 'templates', templateFile);
  const templateContent = fs.readFileSync(templatePath, 'utf8');

  // –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
  const processedContent = templateContent
    .replace(/FeatureName/g, capitalizeFirst(moduleName))
    .replace(/feature-name/g, moduleName.toLowerCase().replace(/_/g, '-'))
    .replace(/feature_name/g, moduleName.toLowerCase().replace(/-/g, '_'))
    .replace(/WidgetName/g, capitalizeFirst(moduleName))
    .replace(/widget-name/g, moduleName.toLowerCase().replace(/_/g, '-'))
    .replace(/widget_name/g, moduleName.toLowerCase().replace(/-/g, '_'));

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  let targetFile;
  if (templateFile === 'feature-api-template.ts') {
    targetFile = path.join(targetPath, 'api', 'index.ts');
  } else if (templateFile === 'feature-ui-template.ts') {
    targetFile = path.join(targetPath, 'ui', 'component.ts');
  } else if (templateFile === 'feature-index-template.ts') {
    targetFile = path.join(targetPath, 'index.ts');
  } else if (templateFile === 'widget-template.ts') {
    targetFile = path.join(targetPath, 'index.ts');
  }

  // –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
  fs.writeFileSync(targetFile, processedContent);
  console.log(`–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${targetFile}`);
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤ shared/types
if (moduleType === 'feature') {
  const typesTemplate = path.join(__dirname, 'templates', 'api-types-template.ts');
  const typesContent = fs.readFileSync(typesTemplate, 'utf8');

  const processedTypes = typesContent
    .replace(/FeatureName/g, capitalizeFirst(moduleName))
    .replace(/feature-name/g, moduleName.toLowerCase().replace(/_/g, '-'))
    .replace(/feature_name/g, moduleName.toLowerCase().replace(/-/g, '_'));

  const typesFile = path.join(basePath, 'shared', 'types', `${moduleName}.ts`);
  fs.writeFileSync(typesFile, processedTypes);
  console.log(`–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Ç–∏–ø–æ–≤: ${typesFile}`);
}

console.log('\n‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
console.log(`\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:`);
console.log(`1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã`);
console.log(`2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –º–æ–¥—É–ª—å –≤ app/registry.ts`);
console.log(`3. –î–æ–±–∞–≤—å—Ç–µ data-module –∞—Ç—Ä–∏–±—É—Ç –≤ HTML`);
console.log(`4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª—è`);

function capitalizeFirst(str) {
  return str.charAt(0).toUpperCase() + str.slice(1).replace(/[-_](.)/g, (_, char) => char.toUpperCase());
}
