# TL;DR
- Цель: минимальный дифф в текущем файле, без хардкодов.
- Алгоритм: оценка → формат A/B → 1–2 итерации → дифф+сводка.
- Cursor Essentials: статус‑обновления, параллельные поиски (3–5), CODE REFERENCES, новый код — markdown.
- Лимиты: дифф ≤80 строк и ≤2 блока; ≤2 итераций; ≤5 вопросов; RAG ≤5 фрагментов.
- Fail‑fast: если меняются публичные контракты или нарушаются инварианты — остановись и вынеси вопросы.
- Режим: generate‑only по умолчанию; правки — только после 'ПЛАН УТВЕРЖДЕН' + 'ВЫПОЛНЯЙ'. Хэнд‑офф: 'HANDOFF'/'PROMPT_ONLY' — выведи только блок PROMPT_START/END (финальный промпт), без диффов/доп. текста.

## Политика инструментов
- Поиски/чтения: 3–5 параллельных, адресные (конкретные секции), без полного чтения больших файлов.
- Большие файлы: сначала семантический поиск по файлу, затем точечное чтение по якорям.
- Переиспользуй собранный контекст; избегай повторных чтений одного и того же места.
- Не запускать авто‑реформатирование; править только целевые блоки.
- Перед удалением/переименованием символа: семантический поиск + точный поиск по шаблонам; адресные чтения call‑sites.
- Scope поиска по проекту: `assets/catalog/**`, `assets/admin/**`, `.cursor/rules/**`, `config/**`; исключить `vendor/**`, `node_modules/**`, `public/**`.
- AI‑маяки: при наличии `// ai:http-client`/`// ai:router`/`// ai:bootstrap`/`// ai:registry` — ограничь область текущим файлом/папкой.

## Cursor Essentials
- Давай короткий статус перед группой действий.
- Независимые поиски/чтения — параллельно (3–5 одновременных).
- Существующий код цитируй так:
```startLine:endLine:filepath
// фрагмент
```
- Новый код — обычный markdown‑блок с языком.
- CODE REFERENCES должны содержать минимум 1 строку кода (не пустой блок); без языковых тегов.

## Scope‑gating
scope: catalog|admin|config — показывай только соответствующий модуль.

Краткие ссылки на инварианты:
- Catalog (FSD/TS): @catalog_js_architecture.mdc; реестр `assets/catalog/src/app/registry.ts`, бутстрап `assets/catalog/catalog.ts`, HTTP ‑ `assets/catalog/src/shared/api/http.ts`.
- Admin SPA (Vue 3/TS): @admin_spa_task_guide; бутстрап `assets/admin/admin.ts`, роутер `assets/admin/router/index.ts`, HTTP ‑ `assets/admin/services/http.ts`.
- Config: Configuration Management Rules; API Platform: `config/packages/api_platform.yaml` (пагинация/фильтры).

## Алгоритм
0) Mode gate: без 'ВЫПОЛНЯЙ'/'IMPLEMENT' — НЕ редактируй код, сгенерируй промпт (Format A/B).
1) Извлеки черновик → оцени триггеры → A (<2) | B (≥2).
1.1) Идемпотентность: проверь существование целевых файлов/классов/функций (repo, view, route) и выбери: переиспользовать/обновить/создать (без дубликатов).
1.2) Usage scan (перед удалениями/переименованиями):
- Найди все вызовы символа (семантика + точные шаблоны) в целевом scope.
- Если найдено >0, сформируй карту влияния и план обновления; >2 файлов → Формат B.
2) Iterative Refinement: до 2 итераций (чек‑лист → (опц.) ≤3 блокирующих вопросов → правки).
3) Триггеры: нет контекста → RAG (≤5 фрагментов) + (опц.) HyDE; низкая уверенность → Self‑Consistency (n=3); high‑risk → Critic/Reviewer (3–5 точечных правок).
4) Error‑loop: lint → types → runtime → logic (точечные правки).
5) Лимиты/Fail‑fast соблюдены? Если нет — вынеси вопросы.
5.1) Контракт параметров: зафиксируй endpoint, формат ответа (Hydra/поля), фильтр `q` (валидация), сорт/пагинация — в финальном PROMPT.
6) Сформируй итоговый промпт в блоке:
=== PROMPT_START ===
... финальный промпт (Format A/B) ...
=== PROMPT_END ===

## Decision Tree (формат A)
Задача про Admin SPA?
├─ Да: см. @admin_spa_task_guide / assets/admin/admin_local
│  ├─ Новый ресурс? → шаблон Repository + View; кэш/инвалидация; маршрут/Sidebar
│  ├─ Список? → useCrud + getPaginationConfig; Hydra‑поля; Pagination.vue
│  └─ Форма? → create/partialUpdate; 400/422 → violations; нормализация чисел
└─ Нет: далее

Задача про Catalog (витрина, FSD)?
├─ Да: см. @catalog_js_architecture.mdc
│  ├─ Модуль (feature/widget): структура FSD, экспорт `init`, регистрация в `app/registry.ts`
│  ├─ HTTP: только через `assets/catalog/src/shared/api/http.ts`; без хардкодов
│  └─ Интеграция: `data-module="..."` в Twig, без inline‑скриптов
└─ Нет: далее

Задача про Config?
├─ Да: Configuration Management Rules
│  ├─ Значения → ENV/YAML; DI/ParameterBag
│  └─ Запреты → без хардкодов/внешних URL во фронте
└─ Нет: далее

Задача про поиск/пагинацию (API Platform)?
├─ Да:
│  ├─ Контракт `q`: валидация (длина/trim/пустая строка)
│  └─ Ответ: использовать Hydra (`hydra:member`, `hydra:totalItems`, `hydra:view`); фронт — только отображение
└─ Нет: далее

Триггеры:
- Нет контекста → RAG (≤5 фрагментов)
- Низкая уверенность → Self‑Consistency (n=3)
- Высокий риск → Critic/Reviewer (3–5 правок) или переход к Формату B

Стоп‑условия → дифф>80, изменения публичных контрактов, нарушение инвариантов → Формат B/вопросы

## Формат ответа агента (обязательный)
- One‑liner (1 строка): кратко цель и выбранная стратегия (A/B).
- Режим:
  - Без 'ВЫПОЛНЯЙ/IMPLEMENT' — generate‑only: сгенерируй итоговый промпт/дифф (текстом).
  - Есть 'ПЛАН УТВЕРЖДЕН' + 'ВЫПОЛНЯЙ' — правки строго по плану ниже.
  - 'HANDOFF'/'PROMPT_ONLY' — выведи только один блок PROMPT_START/END; без диффов/TODO.
- Что нужно от вас (1 строка):
  - [Команда/подтверждение или недостающие данные]
- Блокирующие вопросы (≤3) обязательно, кроме случая «нет — все данные подтверждены»:
  - Q1: Точный endpoint и формат ответа (Hydra/поля)
  - Q2: Контракт `q` (валидация)
  - Q3: Источник лимитов пагинации/сортировки
- Допущения или «нет».
- План после подтверждения ("ВЫПОЛНЯЙ"):
  1) Файл/действие → цель → минимальный дифф
  2) Файл/действие → цель → минимальный дифф
  3) Самопроверка (линтер/типы/i18n/a11y) → текстовый дифф
- Доказательства (evidence):
  - Приложи 1–2 CODE REFERENCES, подтверждающих ключевые решения
  - Обязательно: 1 фронт‑ссылка (контракт вызова/реестр/HTTP) и 1 бэк‑ссылка (контроллер/ресурс/`config/packages/api_platform.yaml`) — endpoint/формат/поля
- Refactor safety:
  - Перечисли все call‑sites (CODE REFERENCES) или явно «0 найдено»
  - План совместимости: временный алиас → обновить вызовы → удалить алиас
  - Коммиты: 1) алиас; 2) обновить вызовы; 3) удалить алиас (после повторного usage scan)
- Сейчас делаю (статус, ≤1–2 строки):
  - ...

### TODO‑политика (для Формата B и сложных задач)
- Создавай атомарные TODO (≤14 слов), verb‑led; без операционных шагов
- Состояния: pending → in_progress → completed|cancelled; в работе только 1 задача
- Обновляй статусы перед/после логических шагов; завершай сразу по готовности
- Не включать: lint/test/search — если не попросили явно

### Если нет ответа на блокирующие вопросы
- Предложи безопасные дефолты и зафиксируй их в «Допущения» и «Acceptance»; продолжай только после явного подтверждения
- Перейди в Format B (Уточнение): RAG по коду/конфигу; 2–3 варианта контракта с плюсами/рисками
- Хэнд‑офф без правок: по 'HANDOFF'/'PROMPT_ONLY' выведи только финальный PROMPT блок
- Ограничь scope: предложи выполнить безопасную часть и зафиксируй TODO для остального
- Фичефлаг/заглушка/спайк — по согласованию, с планом замены/тест‑планом

### Выходные артефакты (обязательные)
- Итоговый промпт в блоке === PROMPT_START === … === PROMPT_END === (Format A/B)
- Текстовый дифф (без реальных правок) и список TODO — если выбран Формат B

## Формат A (простая)
- Работай в текущем файле. Минимальный дифф.
- Цель + план (2–4 шага).
- Реализация: состояния (loading/error), i18n, a11y, без console.log.
- Микро‑контракт (входы/выходы/инварианты, 1–3 строки) + мини‑тест‑план (позитив/негатив/edge).

## Формат B (сложная)
- 3 фазы: Уточнение → Структура → Финализация.
- После каждой фазы — мини‑ревизия; при провале — 1 повтор фазы.
- Перед правками: показать TODO/план, ждать 'ПЛАН УТВЕРЖДЕН' + 'ВЫПОЛНЯЙ'; до подтверждения — только текстовые диффы.
- TODO‑план: атомарные задачи (≤14 слов), без смешения доменов.

## Лимиты (адаптивные)
### Формат A (простая)
- Дифф: ≤80 строк для всех задач; до 2 блоков; модифицируй ≤3 файлов (текущий + до 2 смежных при необходимости типов)
- Итерации: ≤2; Вопросы: ≤5; Контекст (RAG): ≤5
- Admin SPA: без новых зависимостей; HTTP только через `@admin/services/http`; мутации → инвалидация кэша
- Catalog: без inline‑скриптов; регистрация модулей в `app/registry.ts`
- Refactor: шаг‑за‑шагом; в текущем диффе — только добавление алиаса

### Формат B (сложная)
- Файлы: по плану фазы; явная карта влияния перед правками
- Фазы: 3; Вопросы на фазу уточнения: 3–5 (только критичные)
- Контекст: допускается >5 фрагментов — кратко обоснуй
- PROMPT‑строгость: ровно 1 блок PROMPT_START/END

### STOP‑сигналы
- Требуется менять публичные контракты API или добавлять npm‑зависимость
- Нарушаются инварианты Catalog/Admin/Config
- Изменения затрагивают >5 файлов или дифф >200 строк суммарно
→ Стоп и вынеси вопросы
- Нет 'ВЫПОЛНЯЙ' → режим generate‑only
- Предложена фронт‑сортировка/пагинация вместо серверной → STOP, вопросы и возврат к B
- Найден ≥1 не обновлённый call‑site и нет алиаса → STOP
- Нет блока PROMPT_START/END в generate‑only → STOP

## Acceptance + Fail‑fast
- Diff ≤80 строк/≤2 блока; линтер/типы зелёные; CODE REFERENCES соблюдены; нет хардкодов
- Зафиксируй допущения и уровень уверенности
- Коммит/роллбэк: атомарный коммит; короткий план отката (1–2 строки)
- Сохраняй исходные отступы/стиль; правь только целевые блоки
- Usage scan: 0 оставшихся вызовов удалённого/переименованного символа (приведи 1–2 нулевых/обновлённых CODE REFERENCES)
- Контракты: endpoint, формат (Hydra/поля), фильтр `q`, сорт/пагинация — явно описаны
- Evidence: 2 CODE REFERENCES (обязательно фронт + бэк: контроллер/ресурс/конфиг API Platform)
- PROMPT блок присутствует и единственный

# Глоссарий
- RAG — генерация с подтягиванием релевантного контекста
- HyDE — гипотетические описания для улучшения поиска
- CRUD — базовые операции над ресурсами
- DTO — объект передачи данных между слоями
- JWT — токен аутентификации
- API — программный интерфейс
- UI — пользовательский интерфейс
- i18n — интернационализация
- a11y — доступность
- DI — внедрение зависимостей
- ENV — переменные окружения
- YAML — формат конфигураций
- TTL — время жизни кэша
- Hydra — JSON‑LD гипермедиа (API Platform)

# Черновик
=== DRAFT_PROMPT_START ===
<краткое описание задачи>
=== DRAFT_PROMPT_END ===