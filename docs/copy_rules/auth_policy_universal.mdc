---
alwaysApply: false
---

# Политика аутентификации/авторизации (универсальная)

Цель: единая модель логина/логаута и проверки доступа для SPA.

## Клиент (SPA)
- Хранение токена: предпочтительно httpOnly cookie; допустимо временное хранение в памяти. Если используется `localStorage` — очищать на 401/403 и при логауте.
- HTTP‑перехватчики:
  - В запросах добавлять `Authorization: Bearer <token>` автоматически
  - На 401 — событие `auth:unauthorized` → стор `auth.logout()` → редирект на `/login`
  - Исключать циклы 401
- Роут‑гварды:
  - `meta.requiresAuth` → требовать `isAuthenticated`
  - `meta.roles?: string[]` → проверять `hasRole(role)`
- Страница логина: POST `<api_login>` → `{ token }`; после успеха — редирект на главную админки/SPA

## Сервер
- Маршрут логина (JWT): `/api/login` (или иной), возвращает `{ token }`
- CORS/CSRF:
  - Для JWT‑API — CSRF не используется; CORS ограничен доверенными origin
  - Для серверных форм — CSRF включён
- Роли/доступ:
  - Защищённые ресурсы ограничены ролями/правами

## Приёмка
- При истечении токена SPA корректно перенаправляет на логин
- Гварды блокируют доступ без токена/ролей
- Токен не хардкодится; берётся из конфигов/ответа сервера

## Связанные правила
- @spa_architecture_universal.mdc
- @performance_policy_universal.mdc

