---
alwaysApply: true
---

# Запрет хардкодов: правила внедрения + Code Review

## Что запрещено хардкодить
- URL/эндпоинты API, строки подключения к БД
- Email/телефон, пути и каталоги
- Лимиты пагинации/таймауты, TTL кэша
- Креды сторонних сервисов, фичефлаги
- Бизнес‑константы: налоги, лимиты, пороги, правила

## Каноничный шаблон конфигурации

### .env
```bash
DATABASE_URL="postgresql://user:pass@localhost:5432/db"
MAILER_DSN=smtp://localhost:1025
API_BASE_URL=https://api.example.com
MAX_UPLOAD_SIZE=10485760
PAGINATION_LIMIT=20
TAX_RATE=0.21
```

### config/services.yaml (parameters)
```yaml
parameters:
    app.pagination.default_limit: '%env(int:PAGINATION_LIMIT)%'
    app.pagination.max_limit: 100
    app.upload.max_size: '%env(int:MAX_UPLOAD_SIZE)%'
    app.business.tax_rate: '%env(float:TAX_RATE)%'
    app.api.base_url: '%env(API_BASE_URL)%'
    app.notification.admin_email: '%env(ADMIN_EMAIL)%'

    app.upload.directory: '%kernel.project_dir%/public/uploads'
    app.export.directory: '%kernel.project_dir%/var/exports'
```

## Правильные примеры (Backend)

### Внедрение параметров через DI
```php
<?php declare(strict_types=1);

namespace App\Service;

final class OrderService
{
    public function __construct(
        private float $taxRate,
        private int $pendingTimeout,
        private string $adminEmail,
    ) {}

    public function calculateTax(float $amount): float
    {
        return $amount * $this->taxRate;
    }
}
```

```yaml
services:
    App\Service\OrderService:
        arguments:
            $taxRate: '%app.business.tax_rate%'
            $pendingTimeout: '%app.order.pending_timeout%'
            $adminEmail: '%app.notification.admin_email%'
```

### Доступ через ParameterBag
```php
<?php declare(strict_types=1);

namespace App\Service;

use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

final class ConfigurableService
{
    public function __construct(private ParameterBagInterface $params) {}

    public function getUploadDirectory(): string
    { return (string) $this->params->get('app.upload.directory'); }

    public function getMaxFileSize(): int
    { return (int) $this->params->get('app.upload.max_size'); }
}
```

## Правильный пример (Frontend config)
```javascript
window.APP_CONFIG = {
  API_BASE_URL: '{{ app_config.api.base_url }}',
  PAGINATION_LIMIT: {{ app_config.pagination.default_limit }},
  MAX_UPLOAD_SIZE: {{ app_config.upload.max_size }},
  FEATURES: {
    DARK_MODE: {{ app_config.features.dark_mode ? 'true' : 'false' }},
    ANALYTICS: {{ app_config.features.analytics ? 'true' : 'false' }}
  }
};
```

## Неправильный пример (запрещено)
```php
<?php declare(strict_types=1);

final class BadOrderService
{
    public function calculateTax(float $amount): float
    { return $amount * 0.21; /* hardcode ❌ */ }

    public function getPaginationLimit(): int
    { return 20; /* hardcode ❌ */ }

    public function sendNotification(): void
    { $email = 'admin@example.com'; /* hardcode ❌ */ }
}
```

## Проверка на ревью
- Все значения берутся из ENV/parameters/DI, без хардкодов
- Параметры валидны (диапазоны, типы), имена семантичны
- Шаблоны фронта получают конфиг из бэкенда, не из констант

