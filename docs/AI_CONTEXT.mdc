---
alwaysApply: true
---

# AI_CONTEXT v2

Последнее обновление: 2025-09-29

## Назначение
Короткий якорный контекст для ИИ: архитектура, инварианты и ссылки на подробные правила. Используется как pinned-документ для ускорения и повышения качества генерации.

## Технологии и сборка (кратко)
- Symfony 7.3 + API Platform 4.1; Doctrine ORM/DBAL 3
- Admin (SPA): Vue 3, TS strict, TailwindCSS; сборка — Webpack Encore
- Catalog: FSD в `assets/catalog/src`
- Entrypoints: `admin` → `assets/admin/admin.ts`; `catalog` → `assets/catalog/catalog.ts`

## Приоритет правил
1) Архитектурные инварианты → @projectrules.mdc
2) Запрет хардкодов → @hardcoderules.mdc
3) Checkout/бизнес‑флоу → @order_checkout_flow.mdc
4) Списание остатков при оформлении заказа → @checkout_stock_deduction.mdc
4) Справочники → @services.mdc, @doctrine_entities.mdc
5) Диагностика → @logs.mdc
6) Stimulus‑policy → @stimulus_policy.mdc
7) Facet Filter Guide → @facet_filter_guide.mdc
8) Поиск товаров (TNTSearch) → @search_tntsearch.mdc

## Stimulus‑first (UX)
- Интерактив в Twig — через Symfony UX Stimulus (`data-controller`, `data-action`, targets/values), без inline `<script>`
- Исключения — только по необходимости; всё равно через внешний Stimulus‑контроллер
- Для Vue‑админки не применяется (SPA). Подробнее: @stimulus_policy.mdc

## Архитектурные роли (ссылка на канон)
- Frontend (Vue, SPA) — только UI/роутинг/загрузка данных, без бизнес‑логики → см. @projectrules.mdc
- Backend (API Platform) — бизнес‑правила, фильтры/сортировка, пагинация, валидация → см. @projectrules.mdc

## API Platform и пагинация (дефолты)
- Управление страницей/лимитом через query (`page`, `itemsPerPage`).
- Клиент получает метаданные пагинации от API; фронтенд не пересчитывает.
- Для админ‑ресурсов проверь чек‑лист: @paginationapiplatformmapping.mdc

## Логи и диагностика (быстро)
```bash
Get-Content var/log/dev.log -Tail 20
Get-Content var/log/request_dev.log -Tail 10
php bin/console doctrine:schema:validate
```
Подробно: @logs.mdc

## Критерии приёмки изменений
- Соблюдение инвариантов архитектуры и разграничения обязанностей (см. @projectrules.mdc)
- Нет хардкодов; все конфиги через ENV/параметры DI (см. @hardcoderules.mdc)
- Интерактив в Twig — через Stimulus (см. @stimulus_policy.mdc)
- Пагинация/фильтры — на бэкенде; Vue только отображает
- При изменениях сущностей/сервисов/checkout обновлены связанные .mdc: @doctrine_entities.mdc, @services.mdc, @order_checkout_flow.mdc

## Статический анализ (PHPStan)

- Конфигурация: `phpstan.neon.dist`
- Кэш и временные файлы: `var/phpstan`
- Путь к дампу контейнера Symfony (XML): `var/cache/dev/phpstan-container.xml`

Команды запуска:
- Полный анализ: `composer stan`
- Быстрый анализ (только `src`, без прогресса): `composer stan:quick`
- Генерация baseline: `composer stan:baseline`

Обновление контейнера XML:
- Рекомендуемо: `powershell -ExecutionPolicy Bypass -File tools/analyse.ps1`
- Либо вручную: `php bin/console debug:container --format=xml > var/cache/dev/phpstan-container.xml`

Правило приёмки:
- Патчи не должны добавлять новые ошибки PHPStan; при необходимости обновляй baseline (`phpstan-baseline.neon`).

Примечание:
- Messenger в проекте не используется — на статический анализ это не влияет.

Пост-замечание для пользователя:
- После применения патча выполните установку dev-зависимостей: `composer update` (или `composer install`).
- Запуск анализа:
  - Генерация контейнера и проверка: `powershell -ExecutionPolicy Bypass -File tools/analyse.ps1`
  - Быстрый прогон: `composer stan:quick`
  - Генерация baseline: `composer stan:baseline`

### AI‑метки и индекс

- Машиночитаемые AI‑метки добавлены в ключевые классы (`src/**`) в формате AI-META v1 (PHPDoc докблок на уровне класса; редко — на уровне метода).
- Индекс меток генерируется в `docs/runtime/ai-index.json` и может быть использован ИИ для навигации по ролям/границам/инвариантам и маршрутам.

Формат AI‑метки (минимум):
```
/**
 * AI-META v1
 * role: Краткая роль класса (1–2 строки)
 * module: Catalog|Cart|Order|Admin|Delivery|Media|Shared
 * dependsOn:
 *   - FQCN или ID сервиса контейнера
 * invariants:
 *   - Ключевые инварианты/предусловия
 * transaction: em|none|custom
 * tests:
 *   - tests/... (опционально)
 * routes:
 *   - METHOD PATH ROUTE_NAME (для контроллеров)
 * lastUpdated: YYYY-MM-DD
 */
```

- Правило: если меняется роль/зависимости/инварианты класса — обнови докблок и перегенерируй индекс.
- Генерация на Windows:
```
powershell -ExecutionPolicy Bypass -File tools/generate-ai-index.ps1
```
— скрипт обновит `docs/runtime/routes.json` (если доступен `bin/console`), опционально `openapi.json` и соберёт `ai-index.json`.

Frontend (Stimulus-first)
- Используем Symfony UX Stimulus Bundle. Новые интерактивные фичи делаем через Stimulus‑контроллеры в assets/controllers/*_controller.[js|ts].
- Разметка: data-controller, data-action, targets/values/classes; без inline <script> в Twig.
- Регистрация: assets/controllers.json + startStimulusApp() в assets/bootstrap.js.
- PR acceptance: без “голого JS” с обработчиками на document/window; исключения — только по необходимости, но в оболочке Stimulus.