## Статический анализ (PHPStan)

- Конфигурация: `phpstan.neon.dist`
- Кэш и временные файлы: `var/phpstan`
- Путь к дампу контейнера Symfony (XML): `var/cache/dev/phpstan-container.xml`

Команды запуска:
- Полный анализ: `composer stan`
- Быстрый анализ (только `src`, без прогресса): `composer stan:quick`
- Генерация baseline: `composer stan:baseline`

Обновление контейнера XML:
- Рекомендуемо: `powershell -ExecutionPolicy Bypass -File tools/analyse.ps1`
- Либо вручную: `php bin/console debug:container --format=xml > var/cache/dev/phpstan-container.xml`

Правило приёмки:
- Патчи не должны добавлять новые ошибки PHPStan; при необходимости обновляй baseline (`phpstan-baseline.neon`).

Примечание:
- Messenger в проекте не используется — на статический анализ это не влияет.

Пост-замечание для пользователя:
- После применения патча выполните установку dev-зависимостей: `composer update` (или `composer install`).
- Запуск анализа:
  - Генерация контейнера и проверка: `powershell -ExecutionPolicy Bypass -File tools/analyse.ps1`
  - Быстрый прогон: `composer stan:quick`
  - Генерация baseline: `composer stan:baseline`

### AI‑метки и индекс

- Машиночитаемые AI‑метки добавлены в ключевые классы (`src/**`) в формате AI-META v1 (PHPDoc докблок на уровне класса; редко — на уровне метода).
- Индекс меток генерируется в `docs/runtime/ai-index.json` и может быть использован ИИ для навигации по ролям/границам/инвариантам и маршрутам.

Формат AI‑метки (минимум):
```
/**
 * AI-META v1
 * role: Краткая роль класса (1–2 строки)
 * module: Catalog|Cart|Order|Admin|Delivery|Media|Shared
 * dependsOn:
 *   - FQCN или ID сервиса контейнера
 * invariants:
 *   - Ключевые инварианты/предусловия
 * transaction: em|none|custom
 * tests:
 *   - tests/... (опционально)
 * routes:
 *   - METHOD PATH ROUTE_NAME (для контроллеров)
 * lastUpdated: YYYY-MM-DD
 */
```

- Правило: если меняется роль/зависимости/инварианты класса — обнови докблок и перегенерируй индекс.
- Генерация на Windows:
```
powershell -ExecutionPolicy Bypass -File tools/generate-ai-index.ps1
```
— скрипт обновит `docs/runtime/routes.json` (если доступен `bin/console`), опционально `openapi.json` и соберёт `ai-index.json`.

Frontend (Stimulus-first)
- Используем Symfony UX Stimulus Bundle. Новые интерактивные фичи делаем через Stimulus‑контроллеры в assets/controllers/*_controller.[js|ts].
- Разметка: data-controller, data-action, targets/values/classes; без inline <script> в Twig.
- Регистрация: assets/controllers.json + startStimulusApp() в assets/bootstrap.js.
- PR acceptance: без “голого JS” с обработчиками на document/window; исключения — только по необходимости, но в оболочке Stimulus.