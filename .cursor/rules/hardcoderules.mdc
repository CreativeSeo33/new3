---
alwaysApply: true
description: Политика конфигурации и запрета хардкодов (ENV, параметры, DI)
globs:
  - "**/*"
---
# Configuration Management Rules

## Prohibited Hardcoding Patterns
❌ **NEVER** hardcode these values directly in code:
- API URLs and endpoints
- Database connection strings
- Email addresses and phone numbers
- File paths and directory names
- Pagination limits and timeouts
- Third-party service credentials
- Business logic constants (tax rates, limits, etc.)
- Feature flags and toggles
- Cache TTL values
- File upload limits and allowed extensions

## Required Configuration Approach
✅ **ALWAYS** use Symfony configuration system:
- Store values in `config/packages/*.yaml`
- Use environment variables for environment-specific values
- Define custom parameters in `config/services.yaml`
- Inject configuration via dependency injection
- Use parameter bags in services

## Configuration File Structure

### 1. Environment Variables (`.env`)
```bash
# ✅ CORRECT: Environment-specific values
DATABASE_URL="postgresql://user:pass@localhost:5432/db"
MAILER_DSN=smtp://localhost:1025
API_BASE_URL=https://api.example.com
MAX_UPLOAD_SIZE=10485760
PAGINATION_LIMIT=20
TAX_RATE=0.21
ADMIN_EMAIL=admin@example.com
ORDER_PENDING_TIMEOUT=3600
```
2. Services Configuration (config/services.yaml)

```yaml
# ✅ CORRECT: Custom parameters
parameters:
    app.pagination.default_limit: '%env(int:PAGINATION_LIMIT)%'
    app.upload.max_size: '%env(int:MAX_UPLOAD_SIZE)%'
    app.business.tax_rate: '%env(float:TAX_RATE)%'
    app.api.base_url: '%env(API_BASE_URL)%'
    app.notification.admin_email: '%env(ADMIN_EMAIL)%'
    
    # File paths
    app.upload.directory: '%kernel.project_dir%/public/uploads'
    app.export.directory: '%kernel.project_dir%/var/exports'
    
    # Business constants
    app.user.max_login_attempts: 5
    app.order.pending_timeout: '%env(int:ORDER_PENDING_TIMEOUT)%'
```
3. Package-specific Configuration

```yaml
# config/packages/api_platform.yaml
api_platform:
    defaults:
        pagination_items_per_page: '%app.pagination.default_limit%'
        pagination_maximum_items_per_page: 100
```

```yaml
# config/packages/framework.yaml
framework:
    http_client:
        default_options:
            base_uri: '%app.api.base_url%'
```
Backend Implementation Rules
✅ CORRECT: Using Configuration in Services

```php
// Service with injected parameters
class OrderService
{
    public function __construct(
        private float $taxRate,
        private int $pendingTimeout,
        private string $adminEmail
    ) {}
    
    public function calculateTax(float $amount): float
    {
        return $amount * $this->taxRate; // ✅ From config
    }
}
```

```yaml
# Service configuration
services:
    App\Service\OrderService:
        arguments:
            $taxRate: '%app.business.tax_rate%'
            $pendingTimeout: '%app.order.pending_timeout%'
            $adminEmail: '%app.notification.admin_email%'
```
✅ CORRECT: Using ParameterBagInterface

```php
class ConfigurableService
{
    public function __construct(
        private ParameterBagInterface $parameterBag
    ) {}
    
    public function getUploadDirectory(): string
    {
        return $this->parameterBag->get('app.upload.directory');
    }
    
    public function getMaxFileSize(): int
    {
        return $this->parameterBag->get('app.upload.max_size');
    }
}
```
❌ INCORRECT: Hardcoded Values

```php
// ❌ WRONG: Hardcoded values in code
class BadOrderService
{
    public function calculateTax(float $amount): float
    {
        return $amount * 0.21; // ❌ Hardcoded tax rate
    }
    
    public function getPaginationLimit(): int
    {
        return 20; // ❌ Hardcoded pagination limit
    }
    
    public function sendNotification(): void
    {
        $email = 'admin@example.com'; // ❌ Hardcoded email
        // ...
    }
}
```
Exception Cases
Only acceptable hardcoded values:

HTTP status codes (200, 404, etc.)
Standard format patterns (email regex, etc.)
Mathematical constants (π, e, etc.)
Framework-specific constants

## Связанные правила
- @ai_context.mdc