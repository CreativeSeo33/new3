---
alwaysApply: false
---

# Order Checkout: Business Logic Flow (Symfony)

## Точки входа
- GET `/checkout` → `App\Controller\Catalog\CheckoutController::index`
- POST `/checkout` → `App\Controller\Catalog\CheckoutController::submit`

## Пошаговый флоу (POST /checkout)
1) Получение `userId`, корзины на запись: `CartManager::getOrCreateForWrite`
2) Валидация входа; сохранение черновика: `CheckoutContext`
3) Транзакция Doctrine:
   - Создание `Order` (`orderId` из `OrderRepository::getNextOrderId`, `total` из `Cart`)
   - `OrderCustomer` из payload + IP/User‑Agent
   - `OrderDelivery` из `DeliveryService::calculateForCart($cart)` + валидация провайдера
   - Перенос `CartItem` → `OrderProducts` и `OrderProductOptions`
   - `flush()`
   - Закрытие корзины: `expiresAt` в прошлое
4) Очистка `CheckoutContext`
5) Ответ: `{ id, orderId, redirectUrl }`

## Важные детали
- Все операции сохранения — в транзакции
- `orderId` = `MAX+1`: риск гонок → см. docs/order-save-audit.md 
- Корзина после оформления помечается истёкшей

## Где смотреть
- Контроллер: `src/Controller/Catalog/CheckoutController.php`
- Репозиторий: `src/Repository/OrderRepository.php`
- Доставка: `src/Service/Delivery/**`
- Сущности: `src/Entity/Order*.php`

## Псевдокод
```php
$cart = $cartManager->getOrCreateForWrite($userId);
assert($cart->getItems()->count() > 0);

$checkout->setCustomer($payload['customer'] ?? []);
$checkout->setComment($payload['comment'] ?? null);
$checkout->setPaymentMethod($payload['payment'] ?? null);

$em->wrapInTransaction(function () use ($cart, $payload) {
    // Создать Order, Customer, Delivery, перенести позиции, закрыть корзину
});

$checkout->clear();
return $this->json(['id' => $order->getId(), 'orderId' => $order->getOrderId(), 'redirectUrl' => ...]);
```

